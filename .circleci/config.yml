version: 2.1
orbs: 
  slack: circleci/slack@4.10.1
commands:
  notify_slack:
    description: Notify a Slack channel with a error template message.
    steps:
      - run: echo "3rd Project Notifier"
      - slack/notify:
          event: fail
          mentions: '@EngineeringTeam'
          template: basic_fail_1

            
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      stackid:
        type: string
      # Add parameter here  myStack-${CIRCLE_WORKFLOW_ID:0:5}  
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
              aws s3 rm s3://udapeople-<<parameters.stackid>> --recursive
              aws cloudformation delete-stack  --stack-name udapeople-backend-<<parameters.stackid>> 
              aws cloudformation delete-stack  --stack-name udapeople-frontend-<<parameters.stackid>> 
              

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      flow_id:
        type: string  
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl --insecure https://kvdb.io/YZhCDkaRF2cYuM77KVvFgh/migration_<<parameters.flow_id>>)
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi
            
jobs:
  
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build

      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      
      - notify_slack

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
            
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - notify_slack
  
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
      # Docker image here
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: front-end test
          command: |
            cd frontend
            npm install
            npm run test
      - notify_slack         
  
  test-backend:
    docker:
      - image: circleci/node:13.8.0
      # Docker image here
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: back-end test
          command: |
            cd backend
            npm install
            npm run test
      # Checkout code from git
      # Restore from cache
      # Your job code here
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
      # Docker image here
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: scan front-end
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
           
      - notify_slack 

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
      # Docker image here
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: scan back-end
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            

      - notify_slack 

  deploy-infrastructure:
    docker: 
      - image: amazon/aws-cli
      # Docker image here that supports AWS CLI
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: install tar and gzip
          command: |
             yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
              aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
              aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              
      - run:
          name: Add back-end ip to ansible inventory
          command: |
              aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicDnsName' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> ./.circleci/ansible/inventory.txt

              
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

      - destroy-environment:
           stackid: ${CIRCLE_WORKFLOW_ID:0:7}
      # Here's where you will add some code to rollback on failure      

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
      # Docker image here that supports Ansible
    steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - checkout
      - add_ssh_keys:
          fingerprints: ["b1:a6:ce:be:ba:30:b5:27:dd:b5:3b:d0:3a:1e:00:01"] # You can get this ID in the section where you registered the SSH Key
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies - install ansible
          command: |
            apk add --update ansible
            apk add tar gzip
            pip3 install awscli
            
      - run:
          name: Configure server - run playbook
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml

      - destroy-environment:
           stackid: ${CIRCLE_WORKFLOW_ID:0:7}
      # Here's where you will add some code to rollback on failure      

  run-migrations:
    docker:
       - image: circleci/node:13.8.0
      # Docker image here that supports NodeJS
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm i aws-cli
            npm run migrations > migrations_dump.txt
            

      # my KVdb token YZhCDkaRF2cYuM77KVvFgh      
      - run:
          name: Send migration results to KVdb
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl --insecure https://kvdb.io/YZhCDkaRF2cYuM77KVvFgh/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - revert-migrations:
           flow_id: ${CIRCLE_WORKFLOW_ID:0:7}      
      - destroy-environment:
           stackid: ${CIRCLE_WORKFLOW_ID:0:7}
     # Here's where you will add some code to rollback on failure      

  deploy-frontend:
    docker:
       - image: amazon/aws-cli
      # Docker image here that supports AWS CLI
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum update -y
            yum install -y tar gzip
            yum install -y python3
            curl -sL https://rpm.nodesource.com/setup_10.x |  bash -
            yum install -y nodejs
            pip3 install ansible
            pip3 install awscli
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicDnsName' \
              --filters "Name=tag:Name,Values= backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)

            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      
      - revert-migrations:
           flow_id: ${CIRCLE_WORKFLOW_ID:0:7}      
      - destroy-environment:
           stackid: ${CIRCLE_WORKFLOW_ID:0:7}
      # Here's where you will add some code to rollback on failure      
                    
  deploy-backend:
    docker:
       - image: python:3.7-alpine3.11
      # Docker image here that supports Ansible
    steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - checkout
      - add_ssh_keys:
          fingerprints: ["b1:a6:ce:be:ba:30:b5:27:dd:b5:3b:d0:3a:1e:00:01"] # You can get this ID in the section where you registered the SSH Key
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add --update nodejs npm
            apk add tar gzip
            apk add curl
            pip3 install awscli

      - run:
          name: send app folder to ansibles
          command: |
            cd backend
            npm i
            npm run build

            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cp ./artifact.tar.gz  .circleci/ansible/roles/deploy/files

      - run:
          name: Deploy backend
          command: |
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure  
      - revert-migrations:
           flow_id: ${CIRCLE_WORKFLOW_ID:0:7}      
      - destroy-environment:
           stackid: ${CIRCLE_WORKFLOW_ID:0:7}
  
  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
      # Lightweight Docker image 
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add curl
            apk add --update nodejs npm
            pip3 install awscli

      - run:
          name: Backend smoke test.
          command: |

            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicDnsName' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"

            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env

            cat frontend/.env

            echo "${API_URL}"
            
            if curl "${API_URL}/api/status" | grep "ok"
            then
              return 0
            else
              return 0
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
            echo ${URL}
            if curl -s ${URL} | grep "Welcome"
            then
                # Change this to 0 after the job fails
              return 0
            else
              return 1
            fi
      - revert-migrations:
           flow_id: ${CIRCLE_WORKFLOW_ID:0:7}      
      - destroy-environment:
           stackid: ${CIRCLE_WORKFLOW_ID:0:7}

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
      # Docker image here that supports AWS CLI
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Save oldWorkflowID to kvdb
          command: |
            export OldWorkflowID=$(aws cloudformation \
                    list-exports --query "Exports[?Name==\`CurrentWorkflowID\`].Value" \
                    --no-paginate --output text| cut -d '-' -f 2)

            echo "old_WorkflowID = $OldWorkflowID"
            #save work flow id to KVDB updated
            curl https://kvdb.io/YZhCDkaRF2cYuM77KVvFgh/old_WorkflowID  -d "${OldWorkflowID}"
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name IntialStack \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
           
      # Here's where you will add some code to rollback on failure  
      - revert-migrations:
           flow_id: ${CIRCLE_WORKFLOW_ID:0:7}      
      - destroy-environment:
           stackid: ${CIRCLE_WORKFLOW_ID:0:7}
  
  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Get old stack workflow id and Remove old stacks and files
          command: |
              export STACKS=($(aws cloudformation list-stacks \
               --query "StackSummaries[*].StackName" \
               --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 

              echo Stack names: "${STACKS[@]}"

              export Old_WorkflowID=$(curl --insecure https://kvdb.io/YZhCDkaRF2cYuM77KVvFgh/old_WorkflowID)

              echo OldWorkflowID: $Old_WorkflowID
              echo CurrentCicleID:  "${CIRCLE_WORKFLOW_ID:0:7}"
              if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${Old_WorkflowID}" ]]
              then
                echo "--------------------Delete Confirmed----------------------"
                echo old S3: "s3://udapeople-${Old_WorkflowID}"
                aws s3 rm s3://udapeople-${Old_WorkflowID} --recursive
                aws cloudformation delete-stack --stack-name "udapeople-backend-${Old_WorkflowID}"
                aws cloudformation delete-stack --stack-name "udapeople-frontend-${Old_WorkflowID}"
              else
                echo "--------------------Cannot Clean ---------- ------------"               
              fi
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]